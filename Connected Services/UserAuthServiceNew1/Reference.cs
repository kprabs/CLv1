//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserAuthServiceNew1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupUserCrossWalkDTO", Namespace="http://schemas.datacontract.org/2004/07/AHA.IS.Common.Authorization.DTO.New")]
    public partial class GroupUserCrossWalkDTO : object
    {
        
        private System.Nullable<bool> AllowAllBillToAccountsFlagField;
        
        private string CategoryCodeField;
        
        private UserAuthServiceNew1.ClassifiedSegmentInstanceNKeyWIthStatus[] ClassifiedSegmentInstanceNKeyWIthStatusField;
        
        private string CreateUserNKeyField;
        
        private string EmailAddressField;
        
        private string FirstNameField;
        
        private string HmkClientNKeyField;
        
        private string HmkUserNKeyField;
        
        private string LastNameField;
        
        private string LogInSystemUserNameField;
        
        private int MasterLoginSystemUserIDField;
        
        private string PhoneNumField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> AllowAllBillToAccountsFlag
        {
            get
            {
                return this.AllowAllBillToAccountsFlagField;
            }
            set
            {
                this.AllowAllBillToAccountsFlagField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryCode
        {
            get
            {
                return this.CategoryCodeField;
            }
            set
            {
                this.CategoryCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserAuthServiceNew1.ClassifiedSegmentInstanceNKeyWIthStatus[] ClassifiedSegmentInstanceNKeyWIthStatus
        {
            get
            {
                return this.ClassifiedSegmentInstanceNKeyWIthStatusField;
            }
            set
            {
                this.ClassifiedSegmentInstanceNKeyWIthStatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreateUserNKey
        {
            get
            {
                return this.CreateUserNKeyField;
            }
            set
            {
                this.CreateUserNKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailAddress
        {
            get
            {
                return this.EmailAddressField;
            }
            set
            {
                this.EmailAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                return this.FirstNameField;
            }
            set
            {
                this.FirstNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HmkClientNKey
        {
            get
            {
                return this.HmkClientNKeyField;
            }
            set
            {
                this.HmkClientNKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HmkUserNKey
        {
            get
            {
                return this.HmkUserNKeyField;
            }
            set
            {
                this.HmkUserNKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName
        {
            get
            {
                return this.LastNameField;
            }
            set
            {
                this.LastNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogInSystemUserName
        {
            get
            {
                return this.LogInSystemUserNameField;
            }
            set
            {
                this.LogInSystemUserNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MasterLoginSystemUserID
        {
            get
            {
                return this.MasterLoginSystemUserIDField;
            }
            set
            {
                this.MasterLoginSystemUserIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNum
        {
            get
            {
                return this.PhoneNumField;
            }
            set
            {
                this.PhoneNumField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClassifiedSegmentInstanceNKeyWIthStatus", Namespace="http://schemas.datacontract.org/2004/07/AHA.IS.Common.Authorization.DTO.New")]
    public partial class ClassifiedSegmentInstanceNKeyWIthStatus : object
    {
        
        private System.Nullable<bool> ActiveFlagField;
        
        private string ClassifiedSegmentInstanceNKeyField;
        
        private string MasterLoginSystemUserNKeyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> ActiveFlag
        {
            get
            {
                return this.ActiveFlagField;
            }
            set
            {
                this.ActiveFlagField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClassifiedSegmentInstanceNKey
        {
            get
            {
                return this.ClassifiedSegmentInstanceNKeyField;
            }
            set
            {
                this.ClassifiedSegmentInstanceNKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MasterLoginSystemUserNKey
        {
            get
            {
                return this.MasterLoginSystemUserNKeyField;
            }
            set
            {
                this.MasterLoginSystemUserNKeyField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupUserCrossWalkResponse", Namespace="http://schemas.datacontract.org/2004/07/AHA.IS.Common.Authorization.DTO.New")]
    public partial class GroupUserCrossWalkResponse : object
    {
        
        private string ErrorField;
        
        private bool StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error
        {
            get
            {
                return this.ErrorField;
            }
            set
            {
                this.ErrorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserAuthServiceNew1.IUserAuthorizationServiceNew")]
    public interface IUserAuthorizationServiceNew
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/GetUserListBySearchCriteria", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/GetUserListBySearchCriteriaRespon" +
            "se")]
        AHA.IS.Common.Authorization.DTO.New.UserSearchResultsDTO GetUserListBySearchCriteria(AHA.IS.Common.Authorization.DTO.New.SearchCriteriaDTO searchCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/GetUserListBySearchCriteria", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/GetUserListBySearchCriteriaRespon" +
            "se")]
        System.Threading.Tasks.Task<AHA.IS.Common.Authorization.DTO.New.UserSearchResultsDTO> GetUserListBySearchCriteriaAsync(AHA.IS.Common.Authorization.DTO.New.SearchCriteriaDTO searchCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/GetUserDetails", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/GetUserDetailsResponse")]
        AHA.IS.Common.Authorization.DTO.New.UserDetailsDTO GetUserDetails(int loginSystemUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/GetUserDetails", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/GetUserDetailsResponse")]
        System.Threading.Tasks.Task<AHA.IS.Common.Authorization.DTO.New.UserDetailsDTO> GetUserDetailsAsync(int loginSystemUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/GetUserApplicationDetails", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/GetUserApplicationDetailsResponse" +
            "")]
        AHA.IS.Common.Authorization.DTO.New.UserApplicationDetailsDTO GetUserApplicationDetails(int loginSystemUserId, int systemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/GetUserApplicationDetails", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/GetUserApplicationDetailsResponse" +
            "")]
        System.Threading.Tasks.Task<AHA.IS.Common.Authorization.DTO.New.UserApplicationDetailsDTO> GetUserApplicationDetailsAsync(int loginSystemUserId, int systemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/GetUserApplicationDetailsWithMigr" +
            "atedTenants", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/GetUserApplicationDetailsWithMigr" +
            "atedTenantsResponse")]
        AHA.IS.Common.Authorization.DTO.New.UserApplicationDetailsDTO GetUserApplicationDetailsWithMigratedTenants(int loginSystemUserId, int systemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/GetUserApplicationDetailsWithMigr" +
            "atedTenants", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/GetUserApplicationDetailsWithMigr" +
            "atedTenantsResponse")]
        System.Threading.Tasks.Task<AHA.IS.Common.Authorization.DTO.New.UserApplicationDetailsDTO> GetUserApplicationDetailsWithMigratedTenantsAsync(int loginSystemUserId, int systemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/RevokeUserSystemAccess", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/RevokeUserSystemAccessResponse")]
        void RevokeUserSystemAccess(int userId, int systemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/RevokeUserSystemAccess", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/RevokeUserSystemAccessResponse")]
        System.Threading.Tasks.Task RevokeUserSystemAccessAsync(int userId, int systemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/AddOrUpdateUserConsent", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/AddOrUpdateUserConsentResponse")]
        void AddOrUpdateUserConsent(int LoginSystemUserId, int ClassifiedSegmentInstanceId, int ConsentTypeId, bool ConsentFlag, string CreatedLoginUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/AddOrUpdateUserConsent", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/AddOrUpdateUserConsentResponse")]
        System.Threading.Tasks.Task AddOrUpdateUserConsentAsync(int LoginSystemUserId, int ClassifiedSegmentInstanceId, int ConsentTypeId, bool ConsentFlag, string CreatedLoginUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/UpdateUserApplicationDetails", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/UpdateUserApplicationDetailsRespo" +
            "nse")]
        void UpdateUserApplicationDetails(AHA.IS.Common.Authorization.DTO.New.UserApplicationDetailsDTO userApplicaionDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/UpdateUserApplicationDetails", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/UpdateUserApplicationDetailsRespo" +
            "nse")]
        System.Threading.Tasks.Task UpdateUserApplicationDetailsAsync(AHA.IS.Common.Authorization.DTO.New.UserApplicationDetailsDTO userApplicaionDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/GetFeature", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/GetFeatureResponse")]
        AHA.IS.Common.Authorization.DTO.New.FeatureDTO GetFeature(int systemPermissionGroupSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/GetFeature", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/GetFeatureResponse")]
        System.Threading.Tasks.Task<AHA.IS.Common.Authorization.DTO.New.FeatureDTO> GetFeatureAsync(int systemPermissionGroupSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/ReactivateUserSystemAccess", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/ReactivateUserSystemAccessRespons" +
            "e")]
        void ReactivateUserSystemAccess(int userId, string systemCode, System.DateTime effectiveDate, string brandName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/ReactivateUserSystemAccess", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/ReactivateUserSystemAccessRespons" +
            "e")]
        System.Threading.Tasks.Task ReactivateUserSystemAccessAsync(int userId, string systemCode, System.DateTime effectiveDate, string brandName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/DeactivateUserSystemAccess", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/DeactivateUserSystemAccessRespons" +
            "e")]
        void DeactivateUserSystemAccess(int userId, string systemCode, System.DateTime effectiveDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/DeactivateUserSystemAccess", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/DeactivateUserSystemAccessRespons" +
            "e")]
        System.Threading.Tasks.Task DeactivateUserSystemAccessAsync(int userId, string systemCode, System.DateTime effectiveDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/UpdateUserInformation", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/UpdateUserInformationResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AHA.IS.Common.Authorization.DTO.New.UserDetailsDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AHA.IS.Common.Authorization.DTO.New.UserApplicationDetailsDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AHA.IS.Common.Authorization.DTO.New.UserSearchResultDTO))]
        void UpdateUserInformation(AHA.IS.Common.Authorization.DTO.New.UserDTO detailsToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/UpdateUserInformation", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/UpdateUserInformationResponse")]
        System.Threading.Tasks.Task UpdateUserInformationAsync(AHA.IS.Common.Authorization.DTO.New.UserDTO detailsToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/UpdateUserRole", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/UpdateUserRoleResponse")]
        void UpdateUserRole(int userId, string oldRole, string newRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/UpdateUserRole", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/UpdateUserRoleResponse")]
        System.Threading.Tasks.Task UpdateUserRoleAsync(int userId, string oldRole, string newRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/GetFeatureWithPermissionCode", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/GetFeatureWithPermissionCodeRespo" +
            "nse")]
        AHA.IS.Common.Authorization.DTO.New.FeatureWithPermissionDTO GetFeatureWithPermissionCode(int systemPermissionGroupSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/GetFeatureWithPermissionCode", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/GetFeatureWithPermissionCodeRespo" +
            "nse")]
        System.Threading.Tasks.Task<AHA.IS.Common.Authorization.DTO.New.FeatureWithPermissionDTO> GetFeatureWithPermissionCodeAsync(int systemPermissionGroupSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/SaveAuditInfoForGPAndArchive", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/SaveAuditInfoForGPAndArchiveRespo" +
            "nse")]
        void SaveAuditInfoForGPAndArchive(string userName, string clientNKey, string sessionNKey, string effectiveDateISO, string termDateISO, string masterUserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/SaveAuditInfoForGPAndArchive", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/SaveAuditInfoForGPAndArchiveRespo" +
            "nse")]
        System.Threading.Tasks.Task SaveAuditInfoForGPAndArchiveAsync(string userName, string clientNKey, string sessionNKey, string effectiveDateISO, string termDateISO, string masterUserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/SaveGroupUserCrossWalk", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/SaveGroupUserCrossWalkResponse")]
        UserAuthServiceNew1.GroupUserCrossWalkResponse SaveGroupUserCrossWalk([System.ServiceModel.MessageParameterAttribute(Name="saveGroupUserCrossWalk")] UserAuthServiceNew1.GroupUserCrossWalkDTO saveGroupUserCrossWalk1, string systemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/SaveGroupUserCrossWalk", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/SaveGroupUserCrossWalkResponse")]
        System.Threading.Tasks.Task<UserAuthServiceNew1.GroupUserCrossWalkResponse> SaveGroupUserCrossWalkAsync(UserAuthServiceNew1.GroupUserCrossWalkDTO saveGroupUserCrossWalk, string systemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/UpdateGroupUserCrossWalkActiveFla" +
            "g", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/UpdateGroupUserCrossWalkActiveFla" +
            "gResponse")]
        UserAuthServiceNew1.GroupUserCrossWalkResponse UpdateGroupUserCrossWalkActiveFlag(string logInSystemUserName, UserAuthServiceNew1.ClassifiedSegmentInstanceNKeyWIthStatus[] userAllClientStatus, string lastUpdateUserNKey, string systemId, System.Nullable<bool> allowAllBillToAccountsFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/UpdateGroupUserCrossWalkActiveFla" +
            "g", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/UpdateGroupUserCrossWalkActiveFla" +
            "gResponse")]
        System.Threading.Tasks.Task<UserAuthServiceNew1.GroupUserCrossWalkResponse> UpdateGroupUserCrossWalkActiveFlagAsync(string logInSystemUserName, UserAuthServiceNew1.ClassifiedSegmentInstanceNKeyWIthStatus[] userAllClientStatus, string lastUpdateUserNKey, string systemId, System.Nullable<bool> allowAllBillToAccountsFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/UpdateGroupUserCrossWalkMasterLog" +
            "inSystemUser", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/UpdateGroupUserCrossWalkMasterLog" +
            "inSystemUserResponse")]
        UserAuthServiceNew1.GroupUserCrossWalkResponse UpdateGroupUserCrossWalkMasterLoginSystemUser(string logInSystemUserName, string[] classifiedSegmentInstanceId, string masterLoginSystemUserNKey, string lastUpdateUserNKey, string systemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserAuthorizationServiceNew/UpdateGroupUserCrossWalkMasterLog" +
            "inSystemUser", ReplyAction="http://tempuri.org/IUserAuthorizationServiceNew/UpdateGroupUserCrossWalkMasterLog" +
            "inSystemUserResponse")]
        System.Threading.Tasks.Task<UserAuthServiceNew1.GroupUserCrossWalkResponse> UpdateGroupUserCrossWalkMasterLoginSystemUserAsync(string logInSystemUserName, string[] classifiedSegmentInstanceId, string masterLoginSystemUserNKey, string lastUpdateUserNKey, string systemId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IUserAuthorizationServiceNewChannel : UserAuthServiceNew1.IUserAuthorizationServiceNew, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class UserAuthorizationServiceNewClient : System.ServiceModel.ClientBase<UserAuthServiceNew1.IUserAuthorizationServiceNew>, UserAuthServiceNew1.IUserAuthorizationServiceNew
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public UserAuthorizationServiceNewClient(EndpointConfiguration endpointConfiguration) : 
                base(UserAuthorizationServiceNewClient.GetBindingForEndpoint(endpointConfiguration), UserAuthorizationServiceNewClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserAuthorizationServiceNewClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(UserAuthorizationServiceNewClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserAuthorizationServiceNewClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(UserAuthorizationServiceNewClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserAuthorizationServiceNewClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public AHA.IS.Common.Authorization.DTO.New.UserSearchResultsDTO GetUserListBySearchCriteria(AHA.IS.Common.Authorization.DTO.New.SearchCriteriaDTO searchCriteria)
        {
            return base.Channel.GetUserListBySearchCriteria(searchCriteria);
        }
        
        public System.Threading.Tasks.Task<AHA.IS.Common.Authorization.DTO.New.UserSearchResultsDTO> GetUserListBySearchCriteriaAsync(AHA.IS.Common.Authorization.DTO.New.SearchCriteriaDTO searchCriteria)
        {
            return base.Channel.GetUserListBySearchCriteriaAsync(searchCriteria);
        }
        
        public AHA.IS.Common.Authorization.DTO.New.UserDetailsDTO GetUserDetails(int loginSystemUserId)
        {
            return base.Channel.GetUserDetails(loginSystemUserId);
        }
        
        public System.Threading.Tasks.Task<AHA.IS.Common.Authorization.DTO.New.UserDetailsDTO> GetUserDetailsAsync(int loginSystemUserId)
        {
            return base.Channel.GetUserDetailsAsync(loginSystemUserId);
        }
        
        public AHA.IS.Common.Authorization.DTO.New.UserApplicationDetailsDTO GetUserApplicationDetails(int loginSystemUserId, int systemId)
        {
            return base.Channel.GetUserApplicationDetails(loginSystemUserId, systemId);
        }
        
        public System.Threading.Tasks.Task<AHA.IS.Common.Authorization.DTO.New.UserApplicationDetailsDTO> GetUserApplicationDetailsAsync(int loginSystemUserId, int systemId)
        {
            return base.Channel.GetUserApplicationDetailsAsync(loginSystemUserId, systemId);
        }
        
        public AHA.IS.Common.Authorization.DTO.New.UserApplicationDetailsDTO GetUserApplicationDetailsWithMigratedTenants(int loginSystemUserId, int systemId)
        {
            return base.Channel.GetUserApplicationDetailsWithMigratedTenants(loginSystemUserId, systemId);
        }
        
        public System.Threading.Tasks.Task<AHA.IS.Common.Authorization.DTO.New.UserApplicationDetailsDTO> GetUserApplicationDetailsWithMigratedTenantsAsync(int loginSystemUserId, int systemId)
        {
            return base.Channel.GetUserApplicationDetailsWithMigratedTenantsAsync(loginSystemUserId, systemId);
        }
        
        public void RevokeUserSystemAccess(int userId, int systemId)
        {
            base.Channel.RevokeUserSystemAccess(userId, systemId);
        }
        
        public System.Threading.Tasks.Task RevokeUserSystemAccessAsync(int userId, int systemId)
        {
            return base.Channel.RevokeUserSystemAccessAsync(userId, systemId);
        }
        
        public void AddOrUpdateUserConsent(int LoginSystemUserId, int ClassifiedSegmentInstanceId, int ConsentTypeId, bool ConsentFlag, string CreatedLoginUserId)
        {
            base.Channel.AddOrUpdateUserConsent(LoginSystemUserId, ClassifiedSegmentInstanceId, ConsentTypeId, ConsentFlag, CreatedLoginUserId);
        }
        
        public System.Threading.Tasks.Task AddOrUpdateUserConsentAsync(int LoginSystemUserId, int ClassifiedSegmentInstanceId, int ConsentTypeId, bool ConsentFlag, string CreatedLoginUserId)
        {
            return base.Channel.AddOrUpdateUserConsentAsync(LoginSystemUserId, ClassifiedSegmentInstanceId, ConsentTypeId, ConsentFlag, CreatedLoginUserId);
        }
        
        public void UpdateUserApplicationDetails(AHA.IS.Common.Authorization.DTO.New.UserApplicationDetailsDTO userApplicaionDetails)
        {
            base.Channel.UpdateUserApplicationDetails(userApplicaionDetails);
        }
        
        public System.Threading.Tasks.Task UpdateUserApplicationDetailsAsync(AHA.IS.Common.Authorization.DTO.New.UserApplicationDetailsDTO userApplicaionDetails)
        {
            return base.Channel.UpdateUserApplicationDetailsAsync(userApplicaionDetails);
        }
        
        public AHA.IS.Common.Authorization.DTO.New.FeatureDTO GetFeature(int systemPermissionGroupSetId)
        {
            return base.Channel.GetFeature(systemPermissionGroupSetId);
        }
        
        public System.Threading.Tasks.Task<AHA.IS.Common.Authorization.DTO.New.FeatureDTO> GetFeatureAsync(int systemPermissionGroupSetId)
        {
            return base.Channel.GetFeatureAsync(systemPermissionGroupSetId);
        }
        
        public void ReactivateUserSystemAccess(int userId, string systemCode, System.DateTime effectiveDate, string brandName)
        {
            base.Channel.ReactivateUserSystemAccess(userId, systemCode, effectiveDate, brandName);
        }
        
        public System.Threading.Tasks.Task ReactivateUserSystemAccessAsync(int userId, string systemCode, System.DateTime effectiveDate, string brandName)
        {
            return base.Channel.ReactivateUserSystemAccessAsync(userId, systemCode, effectiveDate, brandName);
        }
        
        public void DeactivateUserSystemAccess(int userId, string systemCode, System.DateTime effectiveDate)
        {
            base.Channel.DeactivateUserSystemAccess(userId, systemCode, effectiveDate);
        }
        
        public System.Threading.Tasks.Task DeactivateUserSystemAccessAsync(int userId, string systemCode, System.DateTime effectiveDate)
        {
            return base.Channel.DeactivateUserSystemAccessAsync(userId, systemCode, effectiveDate);
        }
        
        public void UpdateUserInformation(AHA.IS.Common.Authorization.DTO.New.UserDTO detailsToUpdate)
        {
            base.Channel.UpdateUserInformation(detailsToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateUserInformationAsync(AHA.IS.Common.Authorization.DTO.New.UserDTO detailsToUpdate)
        {
            return base.Channel.UpdateUserInformationAsync(detailsToUpdate);
        }
        
        public void UpdateUserRole(int userId, string oldRole, string newRole)
        {
            base.Channel.UpdateUserRole(userId, oldRole, newRole);
        }
        
        public System.Threading.Tasks.Task UpdateUserRoleAsync(int userId, string oldRole, string newRole)
        {
            return base.Channel.UpdateUserRoleAsync(userId, oldRole, newRole);
        }
        
        public AHA.IS.Common.Authorization.DTO.New.FeatureWithPermissionDTO GetFeatureWithPermissionCode(int systemPermissionGroupSetId)
        {
            return base.Channel.GetFeatureWithPermissionCode(systemPermissionGroupSetId);
        }
        
        public System.Threading.Tasks.Task<AHA.IS.Common.Authorization.DTO.New.FeatureWithPermissionDTO> GetFeatureWithPermissionCodeAsync(int systemPermissionGroupSetId)
        {
            return base.Channel.GetFeatureWithPermissionCodeAsync(systemPermissionGroupSetId);
        }
        
        public void SaveAuditInfoForGPAndArchive(string userName, string clientNKey, string sessionNKey, string effectiveDateISO, string termDateISO, string masterUserName)
        {
            base.Channel.SaveAuditInfoForGPAndArchive(userName, clientNKey, sessionNKey, effectiveDateISO, termDateISO, masterUserName);
        }
        
        public System.Threading.Tasks.Task SaveAuditInfoForGPAndArchiveAsync(string userName, string clientNKey, string sessionNKey, string effectiveDateISO, string termDateISO, string masterUserName)
        {
            return base.Channel.SaveAuditInfoForGPAndArchiveAsync(userName, clientNKey, sessionNKey, effectiveDateISO, termDateISO, masterUserName);
        }
        
        public UserAuthServiceNew1.GroupUserCrossWalkResponse SaveGroupUserCrossWalk(UserAuthServiceNew1.GroupUserCrossWalkDTO saveGroupUserCrossWalk1, string systemId)
        {
            return base.Channel.SaveGroupUserCrossWalk(saveGroupUserCrossWalk1, systemId);
        }
        
        public System.Threading.Tasks.Task<UserAuthServiceNew1.GroupUserCrossWalkResponse> SaveGroupUserCrossWalkAsync(UserAuthServiceNew1.GroupUserCrossWalkDTO saveGroupUserCrossWalk, string systemId)
        {
            return base.Channel.SaveGroupUserCrossWalkAsync(saveGroupUserCrossWalk, systemId);
        }
        
        public UserAuthServiceNew1.GroupUserCrossWalkResponse UpdateGroupUserCrossWalkActiveFlag(string logInSystemUserName, UserAuthServiceNew1.ClassifiedSegmentInstanceNKeyWIthStatus[] userAllClientStatus, string lastUpdateUserNKey, string systemId, System.Nullable<bool> allowAllBillToAccountsFlag)
        {
            return base.Channel.UpdateGroupUserCrossWalkActiveFlag(logInSystemUserName, userAllClientStatus, lastUpdateUserNKey, systemId, allowAllBillToAccountsFlag);
        }
        
        public System.Threading.Tasks.Task<UserAuthServiceNew1.GroupUserCrossWalkResponse> UpdateGroupUserCrossWalkActiveFlagAsync(string logInSystemUserName, UserAuthServiceNew1.ClassifiedSegmentInstanceNKeyWIthStatus[] userAllClientStatus, string lastUpdateUserNKey, string systemId, System.Nullable<bool> allowAllBillToAccountsFlag)
        {
            return base.Channel.UpdateGroupUserCrossWalkActiveFlagAsync(logInSystemUserName, userAllClientStatus, lastUpdateUserNKey, systemId, allowAllBillToAccountsFlag);
        }
        
        public UserAuthServiceNew1.GroupUserCrossWalkResponse UpdateGroupUserCrossWalkMasterLoginSystemUser(string logInSystemUserName, string[] classifiedSegmentInstanceId, string masterLoginSystemUserNKey, string lastUpdateUserNKey, string systemId)
        {
            return base.Channel.UpdateGroupUserCrossWalkMasterLoginSystemUser(logInSystemUserName, classifiedSegmentInstanceId, masterLoginSystemUserNKey, lastUpdateUserNKey, systemId);
        }
        
        public System.Threading.Tasks.Task<UserAuthServiceNew1.GroupUserCrossWalkResponse> UpdateGroupUserCrossWalkMasterLoginSystemUserAsync(string logInSystemUserName, string[] classifiedSegmentInstanceId, string masterLoginSystemUserNKey, string lastUpdateUserNKey, string systemId)
        {
            return base.Channel.UpdateGroupUserCrossWalkMasterLoginSystemUserAsync(logInSystemUserName, classifiedSegmentInstanceId, masterLoginSystemUserNKey, lastUpdateUserNKey, systemId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_IUserAuthorizationServiceNew))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IUserAuthorizationServiceNew))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_IUserAuthorizationServiceNew))
            {
                return new System.ServiceModel.EndpointAddress("https://localhost/AuthorizationService/UserAuthorizationServiceNew.svc");
            }
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IUserAuthorizationServiceNew))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://xdw11303.ibx.com/AuthorizationService/UserAuthorizationServiceNew.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpsBinding_IUserAuthorizationServiceNew,
            
            NetTcpBinding_IUserAuthorizationServiceNew,
        }
    }
}
